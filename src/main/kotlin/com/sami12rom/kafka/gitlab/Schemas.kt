package com.sami12rom.kafka.gitlab

import org.apache.kafka.connect.data.SchemaBuilder
import org.apache.kafka.connect.data.Schema

class Schemas {
    companion object {

        val userSchema: Schema = SchemaBuilder.struct()
            .name("User").optional().defaultValue(null)
            .field("id", SchemaBuilder.int32().optional().defaultValue(null))
            .field("username", SchemaBuilder.string().optional().defaultValue(null))
            .field("name", SchemaBuilder.string().optional().defaultValue(null))
            .field("state", SchemaBuilder.string().optional().defaultValue(null))
            .field("locked", SchemaBuilder.bool().optional().defaultValue(null))
            .field("avatar_url", SchemaBuilder.string().optional().defaultValue(null))
            .field("web_url", SchemaBuilder.string().optional().defaultValue(null))
            .build()

        val timeStatsSchema: Schema = SchemaBuilder.struct()
            .name("TimeStats").optional().defaultValue(null)
            .field("time_estimate", SchemaBuilder.int32().optional().defaultValue(null))
            .field("total_time_spent", SchemaBuilder.int32().optional().defaultValue(null))
            .field("human_time_estimate", SchemaBuilder.string().optional().defaultValue(null))
            .field("human_total_time_spent", SchemaBuilder.string().optional().defaultValue(null))
            .build()

        val referenceSchema: Schema = SchemaBuilder.struct()
            .name("Reference").optional().defaultValue(null)
            .field("short", SchemaBuilder.string().optional().defaultValue(null))
            .field("relative", SchemaBuilder.string().optional().defaultValue(null))
            .field("full", SchemaBuilder.string().optional().defaultValue(null))
            .build()

        val taskCompletionStatusSchema: Schema = SchemaBuilder.struct()
            .name("TaskCompletionStatus").optional().defaultValue(null)
            .field("count", SchemaBuilder.int32().optional().defaultValue(null))
            .field("completed_count", SchemaBuilder.int32().optional().defaultValue(null))
            .build()

        val mergedRequestKeySchema: Schema = SchemaBuilder.struct()
            .name("com.sami12rom.mergedRequest").version(1).doc("Merged Request Key Schema")
            .field("project_id", SchemaBuilder.int64())
            .build()

        val mergedRequestValueSchema: Schema = SchemaBuilder.struct()
            .name("com.sami12rom.mergedRequest").version(1).doc("Merged Request Value Schema")
            .field("id", SchemaBuilder.int64())
            .field("iid", SchemaBuilder.int64())
            .field("project_id", SchemaBuilder.int64())
            .field("title", SchemaBuilder.string().optional().defaultValue(null))
            .field("description", SchemaBuilder.string().optional().defaultValue(null))
            .field("state", SchemaBuilder.string().optional().defaultValue(null))
            .field("created_at", SchemaBuilder.string().optional().defaultValue(null))
            .field("updated_at", SchemaBuilder.string().optional().defaultValue(null))
            .field("merged_by", userSchema)
            .field("merge_user", userSchema)
            .field("merged_at", SchemaBuilder.string().optional().defaultValue(null))
            .field("closed_by", userSchema)
            .field("closed_at", SchemaBuilder.string().optional().defaultValue(null))
            .field("target_branch", SchemaBuilder.string().optional().defaultValue(null))
            .field("source_branch", SchemaBuilder.string().optional().defaultValue(null))
            .field("user_notes_count", SchemaBuilder.int64().optional().defaultValue(null))
            .field("upvotes", SchemaBuilder.int64().optional().defaultValue(null))
            .field("downvotes", SchemaBuilder.int64().optional().defaultValue(null))
            .field("author", userSchema)
            .field("assignees", SchemaBuilder.array(userSchema).optional().defaultValue(null))
            .field("assignee", userSchema)
            .field("reviewers", SchemaBuilder.array(userSchema).optional().defaultValue(null))
            .field("source_project_id", SchemaBuilder.int64().optional().defaultValue(null))
            .field("target_project_id", SchemaBuilder.int64().optional().defaultValue(null))
            .field("labels", SchemaBuilder.array(SchemaBuilder.string()).optional().defaultValue(null))
            .field("draft", SchemaBuilder.bool().optional().defaultValue(false))
            .field("work_in_progress", SchemaBuilder.bool().optional().defaultValue(false))
            .field("milestone", SchemaBuilder.string().optional().defaultValue(null))
            .field("merge_when_pipeline_succeeds", SchemaBuilder.bool().optional().defaultValue(false))
            .field("merge_status", SchemaBuilder.string().optional().defaultValue(null))
            .field("detailed_merge_status", SchemaBuilder.string().optional().defaultValue(null))
            .field("sha", SchemaBuilder.string().optional().defaultValue(null))
            .field("merge_commit_sha", SchemaBuilder.string().optional().defaultValue(null))
            .field("squash_commit_sha", SchemaBuilder.string().optional().defaultValue(null))
            .field("discussion_locked", SchemaBuilder.string().optional().defaultValue(null))
            .field("should_remove_source_branch", SchemaBuilder.bool().optional().defaultValue(false))
            .field("force_remove_source_branch", SchemaBuilder.bool().optional().defaultValue(false))
            .field("prepared_at", SchemaBuilder.string().optional().defaultValue(null))
            .field("reference", SchemaBuilder.string().optional().defaultValue(null))
            .field("references", referenceSchema)
            .field("web_url", SchemaBuilder.string().optional().defaultValue(null))
            .field("time_stats", timeStatsSchema)
            .field("squash", SchemaBuilder.bool().optional().defaultValue(false))
            .field("squash_on_merge", SchemaBuilder.bool().optional().defaultValue(false))
            .field("task_completion_status", taskCompletionStatusSchema)
            .field("has_conflicts", SchemaBuilder.bool().optional().defaultValue(false))
            .field("blocking_discussions_resolved", SchemaBuilder.bool().optional().defaultValue(false))
            .field("approvals_before_merge", SchemaBuilder.int64().optional().defaultValue(null))
            .build()
    }
}